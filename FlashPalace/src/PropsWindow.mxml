<?xml version="1.0" encoding="utf-8"?>
<code:MDIWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/halo" xmlns:code="http://code.google.com/p/flexlib/"
				width="250" minWidth="250" minHeight="300" height="410" xmlns:local="*"
				layout="absolute"
				creationComplete="loadUsersProps();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(type="PropEvent", name="saveProp")]
	</fx:Metadata>
		
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import net.codecomposer.palace.model.PalaceLooseProp;
			import net.codecomposer.palace.model.PalaceProp;
			import net.codecomposer.palace.model.PalacePropFormat;
			import net.codecomposer.palace.model.PalacePropStore;
			import net.codecomposer.palace.model.PalaceUser;
			import net.codecomposer.palace.model.SavedPropRecord;
			import net.codecomposer.palace.rpc.PalaceClient;
			import net.codecomposer.palace.rpc.webservice.OPWSConfirmPropsUpload;
			import net.codecomposer.palace.rpc.webservice.OPWSEvent;
			import net.codecomposer.palace.rpc.webservice.OPWSNewProps;
			import net.codecomposer.util.MultiPartFormBuilder;
			private var _palace:PalaceClient;
			
			public static var lastId:int = 0;
			public static var newProp:PalaceProp;
			
			private var importFileReference:FileReference;
			
			[Bindable(event="palaceClientChanged")]
			public function set palace(newValue:PalaceClient):void {
				if (_palace !== newValue) {
					_palace = newValue;
					dispatchEvent(new Event('palaceClientChanged'));
				}
			}
			
			public function get palace():PalaceClient {
				return _palace;
			}
			
			[Bindable]
			private var props:ArrayCollection;
			
			private var lookupTable:Object;
			
			private var so:SharedObject;
			
			private function loadUsersProps():void {
				so = SharedObject.getLocal('usersProps', '/');
				if (!so.data.propBagVersion) {
					so.data.propBagVersion = 1;
				}
				if (!so.data.usersProps) {
					so.data.usersProps = [];
					so.flush();
				}
				if (so.data.usersProps) {
					initPropsCollection();
				}
				trace("There are " + props.length + " props saved.");
			}
			
			private function initPropsCollection():void {
				props = new ArrayCollection();
				lookupTable = {};
				for each (var prop:Object in so.data.usersProps as Array) {
					var propRecord:SavedPropRecord = new SavedPropRecord();
					propRecord.id = prop.id;
					propRecord.crc = prop.crc;
					propRecord.imageDataURL = prop.imageDataURL;
					propRecord.guid = prop.guid;
					propRecord.width = prop.width || 44;
					propRecord.height = prop.height || 44;
					lookupTable[prop.id + ":" + prop.crc] = propRecord;
					props.addItem(propRecord);
				}
			}
			
			private function deleteAll():void {
				props.removeAll();
				lookupTable = {};
				savePropsToDisk();
			}
			
			private function savePropsToDisk():void {
				so.data.usersProps = props.toArray();
				so.flush();
			}
			
			private function handleSaveClick():void {
				var user:PalaceUser = palace.currentUser;
				for each (var prop:PalaceProp in user.props) {
					if (prop.asset.imageDataURL) {
						var propRecord:SavedPropRecord = new SavedPropRecord();
						propRecord.id = prop.asset.id;
						propRecord.crc = prop.asset.crc;
						propRecord.imageDataURL = prop.asset.imageDataURL;
						propRecord.guid = prop.asset.guid;
						propRecord.width = prop.width;
						propRecord.height = prop.height;
						addProp(propRecord);
					}
					else {
						trace(prop.asset.id + " is not a web service prop.");
					}
				}
				savePropsToDisk();
			}
			
			public function addProp(propRecord:SavedPropRecord):void {
				if (lookupTable[propRecord.id + ":" + propRecord.crc]) {
					// already have this prop
				}
				else {
					props.addItemAt(propRecord, 0);
					lookupTable[propRecord.id + ":" + propRecord.crc] = propRecord;
				}
			} 
			
			private function handleNakedClick():void {
				palace.currentUser.naked();
			} 
			
			public function handleWearClick():void {
				if (palace.connected && propsList.selectedItem) {
					var foo:Object = propsList.selectedItem;
					trace("Selected item: " + SavedPropRecord(propsList.selectedItem).id);
					var savedProp:SavedPropRecord = SavedPropRecord(propsList.selectedItem);
					var prop:PalaceProp = PalacePropStore.getInstance().getProp(savedProp.guid, savedProp.id, savedProp.crc);
					palace.currentUser.toggleProp(prop);
				}
			}
			
			private function handleDeleteClick():void {
				var savedProp:SavedPropRecord = SavedPropRecord(propsList.selectedItem);
				if (savedProp) {
					props.removeItemAt(props.getItemIndex(savedProp));
					lookupTable[savedProp.id + ":" + savedProp.crc] = null;
					savePropsToDisk();
				}
			}
			
			private function handleDragEnter(event:DragEvent):void {
				var propData:Object = event.dragSource.dataForFormat('prop');
				if (propData && propData.looseProp) {
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}
			
			private function handleDragOver(event:DragEvent):void {
				if (event.altKey || event.ctrlKey) {
					DragManager.showFeedback(DragManager.COPY);
				}
				else {
					DragManager.showFeedback(DragManager.MOVE);
				}
			}
			
			private function handleDragDrop(event:DragEvent):void {
				var propData:Object = event.dragSource.dataForFormat('prop');
				if (propData.looseProp) {
					var looseProp:PalaceLooseProp = propData.looseProp;
					var prop:PalaceProp = looseProp.prop;
					var propRecord:SavedPropRecord = new SavedPropRecord();
					propRecord.id = prop.asset.id;
					propRecord.crc = prop.asset.crc;
					propRecord.guid = prop.asset.guid;
					propRecord.width = prop.width;
					propRecord.height = prop.height;
					propRecord.imageDataURL = prop.asset.imageDataURL;
					addProp(propRecord);
					savePropsToDisk();
					if (event.action == DragManager.MOVE) {
						PalaceClient.getInstance().deleteLooseProp(propData.propIndex);
					}
				}
			}
			
			private function handleNewClick():void {
				var fileFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png;*.jpeg", "JPEG;GIFf;PNGf;jp2_")
				importFileReference = new FileReference();
				
				importFileReference.addEventListener(Event.SELECT, handleImportImageSelect);
				importFileReference.addEventListener(Event.CANCEL, handleFileCancel);
				importFileReference.addEventListener(Event.COMPLETE, handleFileLoadComplete);
				importFileReference.browse([fileFilter]);
			}
			
			private function handleFileCancel(event:Event):void {
				trace(event);
			}
			
			private function handleImportImageSelect(event:Event):void {
				importFileReference.load();
			}
			
			private function handleFileLoadComplete(event:Event):void {
				var e:PropEvent = new PropEvent(PropEvent.NEW_PROP);
				e.fileReference = importFileReference;
				dispatchEvent(e);
			}
			
			public function addNewProp(newPropDefinition:NewPropDefinition):void {
				
				var id:int = (new Date()).valueOf();
				if (lastId == id) {
					id = lastId + 1;
				}
				var prop:PalaceProp = new PalaceProp(null, id, id);
				prop.animate = newPropDefinition.animate;
				prop.ghost = newPropDefinition.ghost;
				prop.palindrome = newPropDefinition.palindrome;
				prop.bounce = newPropDefinition.bounce;
				prop.head = newPropDefinition.head;
				prop.rare = newPropDefinition.rare;
				prop.asset.name = newPropDefinition.name;
				prop.width = newPropDefinition.width;
				prop.height = newPropDefinition.height;
				prop.horizontalOffset = newPropDefinition.offsetX;
				prop.verticalOffset = newPropDefinition.offsetY;
				prop.bitmap = newPropDefinition.bitmap.bitmapData;
				prop.ready = true;
				prop.webServiceFormat = PalacePropFormat.FORMAT_PNG;
				newProp = prop;
				
				var rpc:OPWSNewProps = new OPWSNewProps();
				rpc.addEventListener(OPWSEvent.RESULT_EVENT, handleNewPropComplete);
				rpc.send([prop]);
			}
			
			private function handleNewPropComplete(event:OPWSEvent):void {
				for each (var propDef:Object in event.result.props) {
					if ( propDef.success ) {
						var prop:PalaceProp = newProp;
						prop.asset.guid = propDef.guid;
						prop.asset.imageDataURL = propDef.image_data_url;
						uploadPropToS3(propDef);
					}
				}
			}
			
			private function uploadPropToS3(propDef:Object):void {
				var s3:Object = propDef.s3_upload_data;
				var request:URLRequest = new URLRequest(propDef.s3_upload_data.upload_url);
				request.method = URLRequestMethod.POST;
				
				var prop:PalaceProp = newProp;
				prop.asset.guid = propDef.guid;
				
				var builder:MultiPartFormBuilder = new MultiPartFormBuilder({
					success_action_status: 201,
					acl: s3.acl,
					key: s3.key,
					"Content-Type": s3.content_type,
					AWSAccessKeyId: s3.aws_access_key_id,
					Policy: s3.policy,
					Signature: s3.signature,
					Expires: s3.expires,
					file: prop.bitmap
				});
				builder.useBase64 = false;
				request.data = builder.data;
				request.contentType = builder.contentType;
				
				trace("Uploading prop id " + prop.asset.id + " - guid " + prop.asset.guid + " - to Amazon S3");
				var guid:String = prop.asset.guid;
				var loader:URLLoader = new URLLoader();
				loader.addEventListener(Event.COMPLETE, function(event:Event):void {
					var prop:PalaceProp = newProp;
					confirmPropUpload(prop);
					trace("Upload complete for prop guid: " + prop.asset.guid)
				});
				loader.addEventListener(IOErrorEvent.IO_ERROR, function(event:IOErrorEvent):void {
					trace("IO Error while uploading prop guid " + prop.asset.guid);
				});
				loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, function(event:SecurityErrorEvent):void {
					trace("Security error while uploading prop guid " + prop.asset.guid);
				});
				loader.dataFormat = URLLoaderDataFormat.TEXT;
				loader.load(request);
			}
			
			private function confirmPropUpload(prop:PalaceProp):void {
				var rpc:OPWSConfirmPropsUpload = new OPWSConfirmPropsUpload();
				rpc.addEventListener(OPWSEvent.RESULT_EVENT, handlePropsUploadConfirmResult);
				rpc.send([prop]);
			}
			
			private function handlePropsUploadConfirmResult(event:OPWSEvent):void {
				var prop:PalaceProp = newProp;
				var savedPropRecord:SavedPropRecord = new SavedPropRecord();
				savedPropRecord.id = prop.asset.id;
				savedPropRecord.crc = prop.asset.crc;
				savedPropRecord.guid = prop.asset.guid;
				savedPropRecord.imageDataURL = prop.asset.imageDataURL;
				addProp(savedPropRecord);
				savePropsToDisk();
			}
		]]>
	</fx:Script>

	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		
		<s:List id="propsList" dataProvider="{props}" width="100%" height="100%"
				dragEnter="handleDragEnter(event)"
				dragOver="handleDragOver(event)"
				dragDrop="handleDragDrop(event)">
			<s:layout>
				<s:TileLayout horizontalGap="0" verticalGap="0" />
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer doubleClick="outerDocument.handleWearClick()"
									mouseMove="handleMouseMove(event)">
						<fx:Script>
							<![CDATA[
								import mx.core.DragSource;
								import mx.managers.DragManager;
								[Bindable]
								private var loaderContext:LoaderContext = new LoaderContext(true);
								
								private function handleMouseMove(event:MouseEvent):void {
									if (event.buttonDown) {
										var dragSource:DragSource = new DragSource();
										dragSource.addData({
											startMouseX: event.stageX,
											startMouseY: event.stageY,
											width: data.width,
											height: data.height,
											propId: data.id
										}, "prop");
										DragManager.doDrag(this, dragSource, event);
									}
								}
							]]>
						</fx:Script>
						
						<s:states>
							<s:State name="normal" />
							<s:State name="hovered" />
							<s:State name="selected" />
						</s:states>
						<mx:Image left="2" right="2" top="2" bottom="2" loaderContext="{loaderContext}"
								  source="{data.imageDataURL}" width="44" height="44" maintainAspectRatio="true"
								  smoothBitmapContent="true" />
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor color="#a8c6ee" alpha.normal="0" alpha.hovered="0.2" alpha.selected="0.4" />
							</s:fill>
						</s:Rect>
						
					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout horizontalAlign="right" />
			</s:layout>
			<s:Button label="New" click="handleNewClick()" />
			<s:Button label="Edit" enabled="false" />
			<s:Button label="Delete" enabled="{propsList.selectedItem != null}" click="handleDeleteClick()" />
			<s:Button label="Wear" enabled="{palace.connected &amp;&amp; propsList.selectedItem != null}" click="handleWearClick()" />
			<s:Button label="Naked" enabled="{palace.connected}" click="handleNakedClick()" />
			<s:Button label="Save" enabled="{palace.connected}" click="handleSaveClick()" />
			
			<!--
			<s:Button label="DeleteAll" click="deleteAll()" />
			-->
			
		</s:Group>
	</s:Group>
	
</code:MDIWindow>
