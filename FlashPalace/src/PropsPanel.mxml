<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 creationComplete="loadUsersProps();"
		 xmlns:mx="library://ns.adobe.com/flex/halo" minWidth="220">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import net.codecomposer.palace.model.PalaceLooseProp;
			import net.codecomposer.palace.model.PalaceProp;
			import net.codecomposer.palace.model.PalacePropStore;
			import net.codecomposer.palace.model.PalaceUser;
			import net.codecomposer.palace.model.SavedPropRecord;
			import net.codecomposer.palace.rpc.PalaceClient;
			private var _palace:PalaceClient;
			
			private var importFileReference:FileReference;
			
			[Bindable(event="palaceClientChanged")]
			public function set palace(newValue:PalaceClient):void {
				if (_palace !== newValue) {
					_palace = newValue;
					dispatchEvent(new Event('palaceClientChanged'));
				}
			}
			
			public function get palace():PalaceClient {
				return _palace;
			}
			
			[Bindable]
			private var props:ArrayCollection;
			
			private var lookupTable:Object;
			
			private var so:SharedObject;
			
			private function loadUsersProps():void {
				so = SharedObject.getLocal('usersProps', '/');
				if (!so.data.propBagVersion) {
					so.data.propBagVersion = 1;
				}
				if (!so.data.usersProps) {
					so.data.usersProps = [];
					so.flush();
				}
				if (so.data.usersProps) {
					initPropsCollection();
				}
				trace("There are " + props.length + " props saved.");
			}
			
			private function initPropsCollection():void {
				props = new ArrayCollection();
				lookupTable = {};
				for each (var prop:Object in so.data.usersProps as Array) {
					var propRecord:SavedPropRecord = new SavedPropRecord();
					propRecord.id = prop.id;
					propRecord.crc = prop.crc;
					propRecord.imageDataURL = prop.imageDataURL;
					propRecord.guid = prop.guid;
					lookupTable[prop.id + ":" + prop.crc] = propRecord;
					props.addItem(propRecord);
				}
			}
			
			private function deleteAll():void {
				props.removeAll();
				lookupTable = {};
				savePropsToDisk();
			}
			
			private function savePropsToDisk():void {
				so.data.usersProps = props.toArray();
				so.flush();
			}
			
			private function handleSaveClick():void {
				var user:PalaceUser = palace.currentUser;
				for each (var prop:PalaceProp in user.props) {
					if (prop.asset.imageDataURL) {
						var propRecord:SavedPropRecord = new SavedPropRecord();
						propRecord.id = prop.asset.id;
						propRecord.crc = prop.asset.crc;
						propRecord.imageDataURL = prop.asset.imageDataURL;
						propRecord.guid = prop.asset.guid;
						addProp(propRecord);
					}
					else {
						trace(prop.asset.id + " is not a web service prop.");
					}
				}
				savePropsToDisk();
			}
			
			public function addProp(propRecord:SavedPropRecord):void {
				if (lookupTable[propRecord.id + ":" + propRecord.crc]) {
					// already have this prop
				}
				else {
					props.addItemAt(propRecord, 0);
					lookupTable[propRecord.id + ":" + propRecord.crc] = propRecord;
				}
			} 
			
			private function handleNakedClick():void {
				palace.currentUser.naked();
			} 
			
			private function handleWearClick():void {
				var foo:Object = propsList.selectedItem;
				trace("Selected item: " + SavedPropRecord(propsList.selectedItem).id);
				var savedProp:SavedPropRecord = SavedPropRecord(propsList.selectedItem);
				var prop:PalaceProp = PalacePropStore.getInstance().getProp(savedProp.guid, savedProp.id, savedProp.crc);
				palace.currentUser.toggleProp(prop);
			}
			
			private function handleDeleteClick():void {
				var savedProp:SavedPropRecord = SavedPropRecord(propsList.selectedItem);
				if (savedProp) {
					props.removeItemAt(props.getItemIndex(savedProp));
					lookupTable[savedProp.id + ":" + savedProp.crc] = null;
					savePropsToDisk();
				}
			}
			
			private function handleDragEnter(event:DragEvent):void {
				var propData:Object = event.dragSource.dataForFormat('prop');
				if (propData) {
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}
			
			private function handleDragOver(event:DragEvent):void {
				DragManager.showFeedback(DragManager.COPY);
			}
			
			private function handleDragDrop(event:DragEvent):void {
				var propData:Object = event.dragSource.dataForFormat('prop');
				var looseProp:PalaceLooseProp = propData.looseProp;
				var prop:PalaceProp = looseProp.prop;
				var propRecord:SavedPropRecord = new SavedPropRecord();
				propRecord.id = prop.asset.id;
				propRecord.crc = prop.asset.crc;
				propRecord.guid = prop.asset.guid;
				propRecord.imageDataURL = prop.asset.imageDataURL;
				addProp(propRecord);
				savePropsToDisk();
			}
			
			private function handleNewClick():void {
				var fileFilter:FileFilter = new FileFilter("Images", "*.jpg;*.gif;*.png;*.jpeg", "JPEG;GIFf;PNGf;jp2_")
				importFileReference = new FileReference();
				importFileReference.addEventListener(Event.SELECT, handleImportImageSelect);
				importFileReference.browse([fileFilter]);
			}
			
			private function handleImportImageSelect(event:Event):void {
				trace("Have file. " + importFileReference.name);
			}
		]]>
	</fx:Script>
	
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:HorizontalLayout />
		</s:layout>
		
		<s:List id="propsList" doubleClick="handleWearClick()" dataProvider="{props}" width="100%" height="100%"
				dragEnter="handleDragEnter(event)"
				dragOver="handleDragOver(event)"
				dragDrop="handleDragDrop(event)">
			<s:layout>
				<s:TileLayout horizontalGap="0" verticalGap="0" />
			</s:layout>
			<s:itemRenderer>
				<fx:Component>
					<s:ItemRenderer>
						<fx:Script>
							<![CDATA[
								[Bindable]
								private var loaderContext:LoaderContext = new LoaderContext(true);
							]]>
						</fx:Script>

						<s:states>
							<s:State name="normal" />
							<s:State name="hovered" />
							<s:State name="selected" />
						</s:states>
						<mx:Image left="2" right="2" top="2" bottom="2" loaderContext="{loaderContext}"
								  source="{data.imageDataURL}" width="44" height="44" maintainAspectRatio="true"
								  smoothBitmapContent="true" />
						<s:Rect width="100%" height="100%">
							<s:fill>
								<s:SolidColor color="#a8c6ee" alpha.normal="0" alpha.hovered="0.2" alpha.selected="0.4" />
							</s:fill>
						</s:Rect>

					</s:ItemRenderer>
				</fx:Component>
			</s:itemRenderer>
		</s:List>
		
		<s:Group>
			<s:layout>
				<s:VerticalLayout horizontalAlign="right" />
			</s:layout>
			<s:Button label="New" click="handleNewClick()" />
			<s:Button label="Edit" enabled="false" />
			<s:Button label="Delete" click="handleDeleteClick()" />
			<s:Button label="Wear" click="handleWearClick()" />
			<s:Button label="Naked" click="handleNakedClick()" />
			<s:Button label="Save" click="handleSaveClick()" />
			
			<!--
				<s:Button label="DeleteAll" click="deleteAll()" />
			-->
			
		</s:Group>
	</s:Group>
	
	
</s:Group>
