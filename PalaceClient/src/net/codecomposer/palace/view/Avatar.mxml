<?xml version="1.0" encoding="utf-8"?>

<!--
This file is part of OpenPalace.

OpenPalace is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenPalace is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenPalace.  If not, see <http://www.gnu.org/licenses/>.
-->

<s:SkinnableContainer xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:fx="http://ns.adobe.com/mxml/2009"
	x="{user.x-22}" y="{user.y-22}"
	height="44"
	width="44"
	mouseEnabled="false"
	buttonMode="{!user.isSelf}"
	creationComplete="handleCreationComplete()"
	xmlns:view="net.codecomposer.palace.view.*"
	xmlns:filters="flash.filters.*">
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexBitmap;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.events.PropertyChangeEvent;
			
			import net.codecomposer.palace.event.PropEvent;
			import net.codecomposer.palace.model.PalaceProp;
			import net.codecomposer.palace.model.PalaceUser;
			
			import spark.effects.Fade;
			import spark.layouts.BasicLayout;
			[Bindable]
			public var user:PalaceUser = new PalaceUser();
			
			public static var chatBubbleTintColors:Array = [
				0xFF9999, // 0  Red
				0xFF9966, // 1  Orange
				0xFFCC88, // 2  Gold
				0xFFFFAA, // 3  Yellow
				0xD0F29F, // 4  Yellow-Green
				0xB9F29F, // 5  Green
				0xAFF2AE, // 6  Green 2
				0xC4F4DE, // 7  Green-Cyan
				0xA9EEF1, // 8  Cyan
				0x8DD2FF, // 9  Cyan-Blue
				0x86ABFF, // 10 Blue
				0x8F86FF, // 11 Blue-Violet
				0xAB86FF, // 12 Violet
				0xEF86FF, // 13 Magenta
				0xFF86E4, // 14 Magenta-Rose
				0xFF86B1  // 15 Rose
			]; 
			
			private var imagesByProp:Dictionary = new Dictionary();
			
			private function updateFace(event:PropertyChangeEvent=null):void {
			}
			
			private function handleCreationComplete():void {
//				var hitSprite:Sprite = new Sprite();
//				hitSprite.x = 44;
//				hitSprite.y = 44;
//				hitSprite.graphics.clear();
//				hitSprite.graphics.beginFill(0x000000, 0);
//				hitSprite.graphics.drawRect(0,0,44,44);
//				hitSprite.graphics.endFill();
//				hitArea = hitSprite;
//				
				user.props.addEventListener(CollectionEvent.COLLECTION_CHANGE, handlePropsChange);
				
				loadProps();
			}
			
			private function loadProps():void {
				var numProps:int = user.props.length;
				for (var i:int = 0; i < numProps; i ++) {
					addProp(PalaceProp(user.props.getItemAt(i)));
				}
			}
			
			private function addProp(prop:PalaceProp):void {
				var image:AlphaHitAreaImage;
				prop.addEventListener(PropEvent.PROP_LOADED, handlePropLoaded);
				image = new AlphaHitAreaImage();
				image.addEventListener(MouseEvent.MOUSE_OVER, handlePropMouseOver);
				image.addEventListener(MouseEvent.MOUSE_OUT, handlePropMouseOut);
				var bitmap:FlexBitmap = FlexBitmap(prop.bitmap);
				image.source = bitmap;
				image.x = prop.horizontalOffset;
				image.y = prop.verticalOffset;
				image.alpha = prop.ghost ? 0.5 : 1.0;
				imagesByProp[prop] = image;
				propsGroup.addElement(image);
			}
			
			private function handlePropMouseOver(event:MouseEvent):void {
				if (!user.isSelf) {
					Mouse.cursor = MouseCursor.BUTTON;
				}
			}
			
			private function handlePropMouseOut(event:MouseEvent):void {
				Mouse.cursor = MouseCursor.ARROW;
			}
			
			private function handlePropsChange(event:CollectionEvent):void {
				var prop:PalaceProp;
				var image:AlphaHitAreaImage;
				switch (event.kind) {
					case CollectionEventKind.ADD:
						for each (prop in event.items) {
							addProp(prop);
						}
						break;
					case CollectionEventKind.REMOVE:
						for each (prop in event.items) {
							prop.removeEventListener(PropEvent.PROP_LOADED, handlePropLoaded);
							image = imagesByProp[prop];
							if (image != null) {
								propsGroup.removeElement(image);
								delete imagesByProp[prop];
							}
						}
						break;
					case CollectionEventKind.RESET:
						imagesByProp = new Dictionary();
						propsGroup.removeAllElements();
						break;
				}
			}
			
			private function handlePropLoaded(event:Event):void {
				var prop:PalaceProp = PalaceProp(event.target);
				var image:AlphaHitAreaImage = imagesByProp[prop];
				image.smoothBitmapContent = true;
				if (image != null) {
					image.alpha = 0;
					image.source = prop.bitmap;
					image.x = prop.horizontalOffset;
					image.y = prop.verticalOffset;
					var fade:Fade = new Fade(image);
					fade.duration = 500;
					fade.alphaFrom = 0;
					fade.alphaTo = prop.ghost ? 0.5 : 1.0;
					fade.play();
				}
			}
			
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>
	
	<s:Scroller
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		width="44" height="44"
		visible="{user.showFace}"
		x="-1" y="-1">
		<s:Group horizontalScrollPosition="{user.face * 45}" verticalScrollPosition="{user.color * 45}">
			<view:AlphaHitAreaImage mouseOver="handlePropMouseOver(event)" mouseOut="handlePropMouseOut(event)"
				smoothBitmapContent="true" source="@Embed(source='assets/faces/defaultsmileys.png')" />
		</s:Group>
	</s:Scroller>
	
	<s:Group id="propsGroup" x="0" y="0"
		mouseEnabled="false">
		<s:layout>
			<s:BasicLayout />
		</s:layout>
	</s:Group>

</s:SkinnableContainer>
