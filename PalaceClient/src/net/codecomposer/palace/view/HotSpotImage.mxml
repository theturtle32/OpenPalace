<?xml version="1.0" encoding="utf-8"?>
<!--
This file is part of OpenPalace.

OpenPalace is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenPalace is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenPalace.  If not, see <http://www.gnu.org/licenses/>.
-->
<mx:Image xmlns:mx="http://www.adobe.com/2006/mxml" source="{mediaServer}{filename}"
	x="{hotspot.location.x + state.x - this.width/2}"
	y="{hotspot.location.y + state.y - this.height/2}"
	smoothBitmapContent="true"
	loaderContext="{PalaceClient.loaderContext}"
	complete="handleLoaded(event)">
	<mx:Script>
		<![CDATA[
			import net.codecomposer.palace.model.PalacePalette;
			import net.codecomposer.palace.rpc.PalaceClient;
			import net.codecomposer.palace.model.PalaceImageOverlay;
			import net.codecomposer.palace.model.PalaceCurrentRoom;
			import net.codecomposer.palace.model.PalaceHotspotState;
			import net.codecomposer.palace.model.PalaceHotspot;
			
			[Bindable]
			public var hotspot:PalaceHotspot;
			[Bindable]
			public var filename:String;
			[Bindable]
			public var state:PalaceHotspotState;
			[Bindable]
			public var mediaServer:String;
			
			private var _transparencyIndex:int = -1;
			
			[Bindable('transparencyChanged')]
			public function get transparencyColor():uint {
				
				if (transparencyIndex == 0 && this.content is Bitmap) {
					try {
						var bitmap:Bitmap = (this.content as Bitmap);
						return bitmap.bitmapData.getPixel32(1, bitmap.height-1);
					}
					catch (e:Error) {
						// do nothing
					}
				}
				
				return PalacePalette.clutARGB[transparencyIndex];
			}

			[Bindable('transparencyChanged')]			
			public function get transparencyIndex():int {
				return _transparencyIndex;
			}
			
			public function set transparencyIndex(newValue:int):void {
				_transparencyIndex = newValue;
				dispatchEvent(new Event('transparencyChanged'));
			} 
			
			private function handleLoaded(event:Event):void {
				// Apply transparency value
				if (this.content is Bitmap) {
					var bitmap:Bitmap = Bitmap(this.content);
					var bd:BitmapData;
					trace(" Transparency: " + filename + " - index color: " + transparencyIndex + " 0x" + transparencyColor.toString(16));
					
					if (transparencyIndex != -1) {
						// Ideally I would like to only Process transparency
						// only if the image isn't already transparent... That
						// seems to break some images in certain palaces.
						// Can check bitmap.bitmapData.transparent
						trace("Processing Transparency.");
						try {
							if (!bitmap.bitmapData.transparent) {
								bd = new BitmapData(bitmap.bitmapData.width, bitmap.bitmapData.height, true, 0x00000000);
								bd.copyPixels(bitmap.bitmapData, bitmap.bitmapData.rect, new Point(bitmap.bitmapData.rect.x, bitmap.bitmapData.rect.y));
								bitmap.bitmapData = bd;
							}
							bitmap.bitmapData.threshold(
								bitmap.bitmapData,
								bitmap.bitmapData.rect,
								new Point(bitmap.bitmapData.rect.x, bitmap.bitmapData.rect.y),
								"==",
								transparencyColor,
								0x00AAFF00
							);
							
						}
						catch (error:Error) {
							trace("WARNING: Error processing transparency: " + error.toString());
							return;
						}
					}
				}
			}
		]]>
	</mx:Script>
</mx:Image>
