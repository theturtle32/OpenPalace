<?xml version="1.0" encoding="utf-8"?>

<!--
This file is part of OpenPalace.

OpenPalace is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenPalace is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenPalace.  If not, see <http://www.gnu.org/licenses/>.
-->

<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/halo"
	clipAndEnableScrolling="true"
	creationComplete="handleCreationComplete()" xmlns:view="net.codecomposer.palace.view.*">
	<fx:Script>
		<![CDATA[
			import net.codecomposer.palace.model.PalaceAsset;
			import net.codecomposer.palace.event.HotspotEvent;
			import net.codecomposer.palace.model.PalaceImageOverlay;
			import net.codecomposer.palace.model.PalaceHotspotState;
			import net.codecomposer.palace.model.PalaceCurrentRoom;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.collections.ArrayCollection;
			import net.codecomposer.palace.model.PalaceHotspot;
			
			[Bindable]
			public var hotSpots:ArrayCollection;
			[Bindable]
			public var room:PalaceCurrentRoom;
			[Bindable]
			public var mediaServer:String;
			
			private var viewsByHotSpot:Dictionary = new Dictionary();
			private var nameTagsByHotSpot:Dictionary = new Dictionary();
			
			
			private function handleCreationComplete():void {
				hotSpots.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleHotSpotsChange);
			}
			
			private function handleHotSpotsChange(event:CollectionEvent):void {
				var hotSpot:PalaceHotspot;
				if (event.kind == CollectionEventKind.ADD) {
					for each (hotSpot in event.items) {
						addHotSpot(hotSpot);
					}
				}
				else if (event.kind == CollectionEventKind.REMOVE) {
					for each (hotSpot in event.items) {
						removeHotSpot(hotSpot);
					}
				}
				else if (event.kind == CollectionEventKind.RESET) {
					trace("Resetting hotspots");
					resetHotSpots();
				}
			}
			
			private function addHotSpot(hotSpot:PalaceHotspot):void {
				
				var hotSpotSprite:HotSpotSprite = new HotSpotSprite(hotSpot, true);
				hotspotCanvas.rawChildren.addChild(hotSpotSprite);
				viewsByHotSpot[hotSpot] = hotSpotSprite;
				
				if (hotSpot.showName) {
					var nameTag:HotSpotNameTag = new HotSpotNameTag();
					nameTag.hotSpot = hotSpot;
					nameTagsByHotSpot[hotSpot] = nameTag;
					hotspotNames.addElement(nameTag);
				}
				
				hotSpot.addEventListener(HotspotEvent.STATE_CHANGED, handleHotspotStateChanged);
				
				for (var i:int = 0; i < hotSpot.states.length; i ++) {
					var isCurrentState:Boolean = Boolean(hotSpot.state == i);
					
					var state:PalaceHotspotState = PalaceHotspotState(hotSpot.states.getItemAt(i));
					var imageOverlay:PalaceImageOverlay = PalaceImageOverlay(room.images[state.pictureId]);
					
					if (imageOverlay && imageOverlay.filename != null) {
						var hotSpotImage:HotSpotImage = new HotSpotImage();
						hotSpotImage.state = state;
						hotSpotImage.hotspot = hotSpot;
						hotSpotImage.transparencyIndex = imageOverlay.transparencyIndex;
						hotSpotImage.filename = imageOverlay.filename;
						hotSpotImage.mediaServer = mediaServer;
						hotSpotImage.visible = isCurrentState;
						state.hotspotImage = hotSpotImage;
						imageGroup.addElement(hotSpotImage);
					}
				}

			}
			
			private function removeHotSpot(hotSpot:PalaceHotspot):void {
				trace("Removing hotspot " + hotSpot.name + " - " + hotSpot.id);
				
			}
			
			private function resetHotSpots():void {
				viewsByHotSpot = new Dictionary();
				nameTagsByHotSpot = new Dictionary();
				while (hotspotCanvas.rawChildren.numChildren > 0) {
					hotspotCanvas.rawChildren.removeChildAt(0);
				}
				imageGroup.removeAllElements();
				hotspotNames.removeAllElements();
			}
			
			private function handleHotspotStateChanged(event:HotspotEvent):void {
				var hotspot:PalaceHotspot = PalaceHotspot(event.target);
				if (hotspot.type == PalaceHotspot.TYPE_LOCKABLE_DOOR ||
				    hotspot.type == PalaceHotspot.TYPE_SHUTABLE_DOOR) {
			    	if (hotspot.state == PalaceHotspot.STATE_LOCKED) {
			    		PalaceSoundPlayer.getInstance().playDoorLock();
			    	}
			    	if (hotspot.state == PalaceHotspot.STATE_UNLOCKED) {
			    		PalaceSoundPlayer.getInstance().playDoorUnlock();
			    	}
			    }
				for (var i:int = 0; i < hotspot.states.length; i++) {
					var hotspotState:PalaceHotspotState = PalaceHotspotState(hotspot.states.getItemAt(i));
					if (hotspotState.hotspotImage != null) {
						hotspotState.hotspotImage.visible = Boolean(i == event.state);
					}
				}
			}
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:BasicLayout />
	</s:layout>

	<s:Group id="imageGroup" top="0" left="0" bottom="0" right="0"
		mouseEnabled="false">
		<s:layout>
			<s:BasicLayout />
		</s:layout>
	</s:Group>

	<s:Group id="hotspotNames" top="0" left="0" bottom="0" right="0"
		mouseEnabled="false">
		<s:layout>
			<s:BasicLayout />
		</s:layout>
	</s:Group>
	
	<mx:Canvas id="hotspotCanvas" top="0" left="0" bottom="0" right="0" 
		verticalScrollPolicy="off" horizontalScrollPolicy="off"/>
	
</s:Group>
